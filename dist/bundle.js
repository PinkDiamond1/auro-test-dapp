(()=>{var __webpack_modules__={138:()=>{eval("let account\n\nconst initializeMina = async () => {\n  const onboardButton = document.getElementById('connectButton')\n  const getAccountsButton = document.getElementById('getAccounts')\n  const getAccountsResults = document.getElementById('getAccountsResult')\n\n  onboardButton.onclick = async () => {\n    if (!window.mina) {\n      alert(\"No provider was found 请先安装 Auro Wallet\")\n    } else {\n      onboardButton.innerText = 'Onboarding in progress'\n      let data = await window.mina.requestAccounts().catch(err => err)\n      if (data.message) {\n        onboardButton.innerText = data.message\n      }else{\n        let approveAccount = data\n        account = approveAccount\n        document.getElementById('accounts').innerHTML = approveAccount;\n        onboardButton.innerText = 'Connected'\n        onboardButton.disabled = true\n      }\n    }\n  }\n\n\n  const initAccount = async ()=>{\n    if (window.mina) {\n      let data = await window.mina.requestAccounts().catch(err => err)\n      let approveAccount = data\n      if (data.message) {\n        getAccountsResults.innerHTML = data.message\n      } else {\n\n        account = approveAccount\n        document.getElementById('accounts').innerHTML = approveAccount;\n        onboardButton.innerText = 'Connected'\n        onboardButton.disabled = true\n\n        getAccountsResults.innerHTML = approveAccount;\n      }\n    }\n  }\n\n  \n  /**\n   * get account\n   */\n  getAccountsButton.onclick = async () => {\n    if (window.mina) {\n      let data = await window.mina.requestAccounts().catch(err => err)\n      let approveAccount = data\n      if (data.message) {\n        getAccountsResults.innerHTML = data.message\n      } else {\n        getAccountsResults.innerHTML = approveAccount;\n      }\n    }\n  }\n\n\n  const sendButton = document.getElementById('sendButton')\n  const sendAmountInput = document.getElementById('sendAmountInput')\n  const receiveAddressInput = document.getElementById('receiveAddressInput')\n  const sendFeeInput = document.getElementById('sendFee')\n  const sendMemoInput = document.getElementById('sendMemo')\n  const sendResultDisplay = document.getElementById('sendResultDisplay')\n\n  /**\n   * transfer \n   */\n  sendButton.onclick = async () => {\n\n    let sendResult = await window.mina.sendLegacyPayment({\n      amount: sendAmountInput.value,\n      to: receiveAddressInput.value,\n      fee: sendFeeInput.value,\n      memo: sendMemoInput.value\n    }).catch(err => err)\n\n    if (sendResult.hash) {\n      sendResultDisplay.innerHTML = sendResult.hash\n    } else {\n      sendResultDisplay.innerHTML = sendResult.message\n    }\n  }\n\n  /**\n   * staking\n   */\n  const stakingButton = document.getElementById('stakingButton')\n  const vaildatorAddressInput = document.getElementById('vaildatorAddressInput')\n  const stakeFeeInput = document.getElementById('stakeFee')\n  const stakeMemoInput = document.getElementById('stakeMemo')\n  const stakingResultDisplay = document.getElementById('stakingResultDisplay')\n\n  stakingButton.onclick = async () => {\n    let stakingResult = await window.mina.sendLegacyStakeDelegation({\n      to: vaildatorAddressInput.value,\n      fee: stakeFeeInput.value,\n      memo: stakeMemoInput.value\n    }).catch(err => err)\n    if (stakingResult.hash) {\n      stakingResultDisplay.innerHTML = stakingResult.hash\n    } else {\n      stakingResultDisplay.innerHTML = stakingResult.message\n    }\n  }\n  /**\n   * sign message\n   */\n  const signMessageButton = document.getElementById('signMessageButton')\n  const signMessageContent = document.getElementById('signMessageContent')\n  const signMessageResult = document.getElementById('signMessageResult')\n\n\n  let signResult\n\n  signMessageButton.onclick = async () => {\n    signResult = await window.mina.signMessage({\n      message: signMessageContent.value,\n    }).catch(err => err)\n    if (signResult.signature) {\n      signMessageResult.innerHTML = JSON.stringify(signResult.signature)\n    } else {\n      signMessageResult.innerHTML = signResult.message\n    }\n  }\n\n  const signVerifyButton = document.getElementById('signVerifyButton')\n  const verifyResult = document.getElementById('verifyResult')\n\n\n  const verifySignatureContent = document.getElementById('verifySignature')\n  const verifyMessageContent = document.getElementById('verifyMessage')\n  /**\n   * Verify Message\n   */\n  signVerifyButton.onclick = async () => {\n    let from = account && account.length > 0 ? account[0] : \"\"\n\n    let verifyContentStr = verifySignatureContent.value\n    let signature \n    try {\n      signature = JSON.parse(verifyContentStr)\n    } catch (error) {\n    }\n    if(!signature){\n      console.log('please input value json')\n      return \n    }\n\n    let verifyMessageBody = {\n      publicKey: from,\n      signature: {\n        field: signature?.field,\n        scalar: signature?.scalar\n      },\n      payload: verifyMessageContent.value\n    }\n    let messageVerifyResult = await window.mina.verifyMessage(verifyMessageBody).catch(err => err)\n    verifyResult.innerHTML = messageVerifyResult.error?.message||messageVerifyResult\n  }\n\n\n\n\n\n\n  setTimeout(async () => {\n    if (window.mina) {\n      window.mina.on('accountsChanged', handleNewAccounts)\n      window.mina.on('chainChanged', handleChainChange)\n\n      let data = await window.mina.requestNetwork().catch(err => err)\n      handleChainChange(data)\n      initAccount()\n    }\n  }, 200);\n\n  const networkDiv = document.getElementById('network')\n  function handleChainChange(newChain) {\n    networkDiv.innerHTML = newChain\n  }\n  \n\n  function handleNewAccounts(newAccounts) {\n    if (Array.isArray(newAccounts)) {\n      document.getElementById('accounts').innerHTML = newAccounts;\n      if (newAccounts.length === 0) {\n        onboardButton.innerText = 'Connect'\n        onboardButton.disabled = false\n      }\n    }\n  }\n}\nwindow.addEventListener('DOMContentLoaded', initializeMina)//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///138\n")}},__webpack_exports__={};__webpack_modules__[138](),window.playground=__webpack_exports__.playground})();